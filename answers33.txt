Задание Б:
1. Исключения - это ошибки, возникающие как в ходе написания кода, так и в ходе работы кода.
2. ArithmeticException - ошибки в арифметических заданиях. IndexOutOfBoundException - возникает в случае, если индекс вне границ массива
3. Класс Exeption также как и класс Error, наследуется от базового класса Throwable. А от самого класса Exeption уже наследуются классы проверяемых и непроверяемых исключений.
4. Ошибки можно 'обработать' и ловить в ходе работы кода. Это необходимо для корректной работы кода и для того, чтобы не появлялись ошибки, которые будут возникать в ходе его работы. Это нужно делать в случаях, когда мы ожидаем, что могут возникнуть такие ошибки. Например, если человеку нужно будет вводить данные самому, через тот же сканнер, например.
5. Try-Catch - это обработка исключений. Try определяет часть кода, в котором может произойти исключение, а Catch определяет часть кода, в котором происходит обработка исключения. Буквально мы ловим ошибку в данной конструкции кода и выводим информацию об этом в случае, если такая ошибка была выявлена.

Задание В:
1. Error - серьезные ошибки. Часто возникают, когда мы некорректно составили код, о чем-то забыли, что-то не реализовали, не заполнили.
RuntimeExeption - ошибки, которые не проверяются (unchecked exeptions). Возникают на стадии компиляции. Но мы их можем поймать.
CheckedExeption - ошибки, которые мы ожидаем и можем предугадать. Для чего мы и можем в коде написать 'ловушки'.
2. Через throw мы можем вывести в консоль проверяемые ошибки или созданные нами 'ошибки'. Допустим мы просим заполнить анкету и в ней не может быть отрицательного или нулевого значения. Если оно было введено, то в консоли появляется данная ошибка.
3. Главная разница: checked - возникают в ожидаемых местах, а unchecked - в неожиданных. Но те и другие мы можем выявить в ходе работы программы.
4. Блок {}try - в него пишется код, который необходимо проверить, проверяется он в блоке {}catch, который 'ловит' исключение и выводит информацию, которую мы задали кодом, далее переходит в блок {}finally (если он вообще есть в коде), а данный блок работает в любом случае. Например, если catch не сработал, finally будет работать все равно.
5. Принцип - от простого к сложному. Сначала выявляется - есть ли вообще ошибки, а потом уже какие конкретно, если они есть.